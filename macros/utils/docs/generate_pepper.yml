version: 2

macros:
  - name: generate_pepper
    description: >
      Generates a value that may be suitable as a pepper to increase
      the security of the hash generated by this package. For additionally security,
      set the `DBT_PRIVACY_PEPPER_SEED` environment variable to a random value.
      Defaults to creating a pepper that is long-lived and unique per-model, but this 
      can be configured depending on your needs.

      Consider using a CSPRNG to generate your `DBT_PRIVACY_PEPPER_SEED` value. Several
      common libraries, like openssl, can generate suitable keys. Or on Linux, you can
      use the kernel's CSPRNG with a command like:

      ```
      cat /dev/urandom | head -n 50 | od -x | cut -b 8-12,14-18 | xargs | sed 's/ //g' | cut -b 1-64
      ```
      
      NOTE: The value of `DBT_PRIVACY_PEPPER_SEED` will be visible in the compiled 
      model code and in query logs. If an attacker has access to the code and the
      data, they will be able to construct a rainbow table for this hash method,
      unless `salt_expr` is also provided to the hash function.
    docs:
      show: true
    arguments:
      - name: pepper_scope
        type: string
        description: >
          Defaults to `'model'`. Must be one of (`'model'`, `'target'`, or
          `'project'`). The pepper generated will be unique within the defined scope,
          which means the hash produced for an `expr` will also be unique within the
          defined scope. For example, if you would like to hash an email address field
          and would like a unique email address to have the same digest in multiple
          models, use the `target` scope. If you would like that email address to have
          the same digest in dev and prod, use the `project` scope
      - name: pepper_persistence
        type: string
        description: >
          Defaults to `'permanent'`. Must be one of (`'permanent'` or `'per-run'`).
          If `per-run`, a new pepper will be generated on every run of dbt.
